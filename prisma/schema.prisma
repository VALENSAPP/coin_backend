// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String?  @unique
  password       String?
  googleId       String?  @unique
  twitterId      String?  @unique
  walletAddress  String?  @unique
  registrationType RegistrationType
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // Profile fields
  userName       String?
  displayName    String?  @unique
  bio            String?
  phoneNumber    String?
  gender         Gender?
  image          String?
  age            Int?
  // Soft delete
  deletedAt      DateTime?
  isDeleted      Int      @default(0)
  // OTP for password reset
  otp            String?
  otpExpiresAt   DateTime?
  // Email verification
  verifyEmail    Int      @default(0)
  // Add relation to posts
  posts         Post[]
  // Post like relations
  postLikes     PostLike[]
  // Post comment relations
  postComments  PostComment[]
  // Post save relations
  savedPosts   SavePost[]
  // Follower/following relations
  followers     FollowerAndFollowing[] @relation("Following")
  followings    FollowerAndFollowing[] @relation("Follower")
  // Blocked user relations
  blockedUsers  BlockedUser[] @relation("Blocker")
  blockedBy     BlockedUser[] @relation("Blocked")
}

enum RegistrationType {
  NORMAL
  GOOGLE
  TWITTER
  WALLET
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Post {
  id        String   @id @default(uuid())
  text      String?
  images    String[] // Array of image URLs
  caption   String?
  hashtag   String[]
  location  String?
  music     String?
  taggedPeople String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  deletedAt DateTime?
  // Post like relations
  likes     PostLike[]
  // Post comment relations
  comments  PostComment[]
  // Post save relations
  saves     SavePost[]
}

model PostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
}

model PostComment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  comment   String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model SavePost {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@index([postId])
}
model FollowerAndFollowing {
  id            String   @id @default(uuid())
  followerId    String
  followingId   String
  status        FollowStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  follower      User     @relation("Follower", fields: [followerId], references: [id])
  following     User     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

enum FollowStatus {
  PENDING
  ACCEPTED
}

model BlockedUser {
  id         String   @id @default(uuid())
  blockerId  String
  blockedId  String
  createdAt  DateTime @default(now())

  blocker    User     @relation("Blocker", fields: [blockerId], references: [id])
  blocked    User     @relation("Blocked", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
}
