import { PrismaService } from '../prisma/prisma.service';
export type RegistrationType = 'NORMAL' | 'GOOGLE' | 'TWITTER' | 'WALLET';
export declare class UserService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    register(data: {
        email?: string;
        password?: string;
        googleId?: string;
        twitterId?: string;
        walletAddress?: string;
        registrationType: RegistrationType;
    }): Promise<{
        id: string;
        email: string | null;
        password: string | null;
        googleId: string | null;
        twitterId: string | null;
        walletAddress: string | null;
        registrationType: import(".prisma/client").$Enums.RegistrationType;
        createdAt: Date;
        updatedAt: Date;
        phoneNumber: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        image: string | null;
        age: number | null;
        deletedAt: Date | null;
        isDeleted: number;
        otp: string | null;
        otpExpiresAt: Date | null;
        verifyEmail: number;
    }>;
    validateUser(data: {
        email?: string;
        password?: string;
        googleId?: string;
        twitterId?: string;
        walletAddress?: string;
        registrationType: RegistrationType;
    }): Promise<{
        id: string;
        email: string | null;
        password: string | null;
        googleId: string | null;
        twitterId: string | null;
        walletAddress: string | null;
        registrationType: import(".prisma/client").$Enums.RegistrationType;
        createdAt: Date;
        updatedAt: Date;
        phoneNumber: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        image: string | null;
        age: number | null;
        deletedAt: Date | null;
        isDeleted: number;
        otp: string | null;
        otpExpiresAt: Date | null;
        verifyEmail: number;
    }>;
    private uploadImageToS3;
    editProfile(userId: string, dto: any, image?: Express.Multer.File): Promise<{
        id: string;
        email: string | null;
        password: string | null;
        googleId: string | null;
        twitterId: string | null;
        walletAddress: string | null;
        registrationType: import(".prisma/client").$Enums.RegistrationType;
        createdAt: Date;
        updatedAt: Date;
        phoneNumber: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        image: string | null;
        age: number | null;
        deletedAt: Date | null;
        isDeleted: number;
        otp: string | null;
        otpExpiresAt: Date | null;
        verifyEmail: number;
    }>;
    forgotPassword(email: string): Promise<boolean>;
    verifyOtp(email: string, otp: string): Promise<boolean>;
    sendEmailOtp(email: string): Promise<boolean>;
    verifyEmailOtp(email: string, otp: string): Promise<boolean>;
    resetPassword(email: string, otp: string, newPassword: string): Promise<boolean>;
    getUserById(id: string): Promise<{
        id: string;
        email: string | null;
        password: string | null;
        googleId: string | null;
        twitterId: string | null;
        walletAddress: string | null;
        registrationType: import(".prisma/client").$Enums.RegistrationType;
        createdAt: Date;
        updatedAt: Date;
        phoneNumber: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        image: string | null;
        age: number | null;
        deletedAt: Date | null;
        isDeleted: number;
        otp: string | null;
        otpExpiresAt: Date | null;
        verifyEmail: number;
    }>;
    getAllUsers(): Promise<{
        id: string;
        email: string | null;
        password: string | null;
        googleId: string | null;
        twitterId: string | null;
        walletAddress: string | null;
        registrationType: import(".prisma/client").$Enums.RegistrationType;
        createdAt: Date;
        updatedAt: Date;
        phoneNumber: string | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        image: string | null;
        age: number | null;
        deletedAt: Date | null;
        isDeleted: number;
        otp: string | null;
        otpExpiresAt: Date | null;
        verifyEmail: number;
    }[]>;
    softDeleteUser(id: string): Promise<boolean>;
}
